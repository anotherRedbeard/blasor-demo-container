name: Trigger auto deployment for red-scus-blazorclient-aca

# When this action will be executed
on:
  # Automatically trigger it when detected changes in repo
  push:
    branches: 
      [ main ]
    paths:
    - '**'
    - '.github/workflows/deploy-package.yml'

  # Allow mannually trigger 
  workflow_dispatch:

env:
  version: 'v1.0'
  location: 'southcentralus'
  resource-group-name: 'red-scus-test-rg'
  log-analytics-workspace-name: 'redscusworkspace00111'
  aca-env-name: 'dev-env'
  registry-name: 'redscuscontainerreg000111'
  registry-sku: 'Standard'
  image-name: 'todo-blazorclient'
  container-name: 'todo-blazorclient-aca'

jobs:
  build-infra:
    runs-on: ubuntu-latest

    outputs:
      acr-username: ${{ steps.encrypt-secrets.outputs.acr-username }}
      acr-password: ${{ steps.encrypt-secrets.outputs.acr-password }}

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.REDSCUSBLAZORCLIENTACA_AZURE_CREDENTIALS }}

      - name: Create Resource Group
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az group create -l ${{ env.location }} -n ${{ env.resource-group-name}}
            
      - name: Create Log Analytics Workspace
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az monitor log-analytics workspace create --resource-group ${{ env.resource-group-name }} --workspace-name ${{ env.log-analytics-workspace-name }}
            # Get the Client_ID and CLIENT_SECRET, run each separately and wait for it to complete
            LOG_ANALYTICS_WORKSPACE_CLIENT_ID=$(az monitor log-analytics workspace show --query customerId -g ${{ env.resource-group-name }} -n ${{ env.log-analytics-workspace-name }} --out tsv)
            LOG_ANALYTICS_WORKSPACE_CLIENT_SECRET=$(az monitor log-analytics workspace get-shared-keys --query primarySharedKey -g ${{ env.resource-group-name }} -n ${{ env.log-analytics-workspace-name }} --out tsv)
            echo "::add-mask::$LOG_ANALYTICS_WORKSPACE_CLIENT_ID"
            echo "::add-mask::$LOG_ANALYTICS_WORKSPACE_CLIENT_SECRET"
            echo LOG_ANALYTICS_WORKSPACE_CLIENT_ID=$LOG_ANALYTICS_WORKSPACE_CLIENT_ID >> $GITHUB_ENV
            echo LOG_ANALYTICS_WORKSPACE_CLIENT_SECRET=$LOG_ANALYTICS_WORKSPACE_CLIENT_SECRET >> $GITHUB_ENV
            
      - name: Create Container Registry
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az acr create -n ${{ env.registry-name }} -g ${{ env.resource-group-name }} --sku ${{ env.registry-sku }} --admin-enabled true
            ACR_USERNAME=$(az acr credential show -n ${{ env.registry-name }} --query username --out tsv)
            ACR_PASSWORD=$(az acr credential show -n ${{ env.registry-name }} --query passwords[0].value --out tsv)
            echo "::add-mask::$ACR_PASSWORD"
            echo ACR_USERNAME=$ACR_USERNAME >> $GITHUB_ENV
            echo ACR_PASSWORD=$ACR_PASSWORD >> $GITHUB_ENV

      - name: Create Container App Environment
        uses: azure/CLI@v1
        with:
          inlineScript: |
            #Allow az cli to get extensions without prompts and containerapp needs an extension
            az config set extension.use_dynamic_install=yes_without_prompt
            az containerapp env create --name ${{ env.aca-env-name }} --resource-group ${{ env.resource-group-name }} --location ${{ env.location }} --logs-workspace-id $LOG_ANALYTICS_WORKSPACE_CLIENT_ID --logs-workspace-key $LOG_ANALYTICS_WORKSPACE_CLIENT_SECRET

      - name: Encrypt secrets
        id: encrypt-secrets
        run: |
            ACR_PASSWORD_ENCRYPTED=$(gpg --symmetric --batch --passphrase ${{ secrets.GPG_SECRET_SIGNING_PASSPHRASE }} --output - <(echo $ACR_PASSWORD) | base64 -w0)
            echo "::set-output name=acr-username::$ACR_USERNAME"
            echo "::set-output name=acr-password::$ACR_PASSWORD_ENCRYPTED"
  
  build:
    runs-on: ubuntu-latest
    needs: build-infra

    steps:
      - name: Decrypt Secrets
        id: decrypt-secrets
        run: |
            ACR_PASSWORD_DECRYPTED=$(gpg --decrypt --quiet --batch --passphrase ${{ secrets.GPG_SECRET_SIGNING_PASSPHRASE }} --output - <(echo ${{ needs.build-infra.outputs.acr-password }}) | base64 --decode)
            echo "::add-mask::$ACR_PASSWORD_DECRYPTED"
            echo "value $ACR_PASSWORD_DECRYPTED"
            echo "$ACR_PASSWORD_DECRYPTED=$ACR_PASSWORD_DECRYPTED >> $GITHUB_ENV"

      - name: test
        run: echo "${{ needs.build-infra.outputs.acr-username }} - pwd $ACR_PASSWORD_DECRYPTED"

      - name: Checkout to the branch
        uses: actions/checkout@v2

      - name: Replace AppSettings variables
        uses: microsoft/variable-substitution@v1 
        with:
            files: 'wwwroot/appsettings.json'
        env:
            message: This is from dev
            TodoApiBaseUrl: https://red-scus-demo-aca.icymoss-1ea051d6.southcentralus.azurecontainerapps.io/
            #TodoApiBaseUrl: https://localhost:7133/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.registry-name }}.azurecr.io
          username: ${{ needs.build-infra.outputs.acr-username }}
          password: $ACR_PASSWORD_DECRYPTED

      - name: Build and push container image to registry
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.registry-name }}.azurecr.io/${{ env.image-name }}:${{ env.version }}.${{ github.run_number }}
          file: ./Dockerfile
          context: ./

  deploy:
    runs-on: ubuntu-latest
    needs: [build, build-infra]
    
    steps:
      - name: test
        run: echo "${{ needs.build-infra.outputs.acr-username }} - pwd ${{ needs.build-infra.outputs.acr-password }}"

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.REDSCUSBLAZORCLIENTACA_AZURE_CREDENTIALS }}


      - name: Deploy to containerapp
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt
            az containerapp create -n ${{ env.container-name }} -g ${{ env.resource-group-name }} \
              --image ${{ env.registry-name }}.azurecr.io/${{ env.image-name }}:${{ env.version }}.${{ github.run_number }} \
              --environment ${{ env.aca-env-name }} --registry-server ${{ env.registry-name }}.azurecr.io \
              --registry-username ${{ needs.build-infra.outputs.acr-username }} \
              --registry-password ${{ needs.build-infra.outputs.acr-password }} \
              --env-vars message='test is a test' value=foobar